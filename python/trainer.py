# -*- coding: utf-8 -*-
import argparse
import datetime as dt
import json
import os
import pickle
from subprocess import call
import Models.Utils.HyperoptHelper as hh
import Models.RandomForest as rf


# TODO: Adding logging functionality


def create_output_dir(model_type):
    if not os.path.isdir("./saved_models"):
        call("mkdir saved_models", shell=True)
    
    if not os.path.isdir("./saved_models/%s" % model_type):
        call("mkdir saved_models/%s" % model_type, shell=True)

    # Create directory storing all files generated by the current run
    now = dt.datetime.now()
    output_dir = "saved_models/%s/%s" % (model_type, 
        now.strftime("%Y-%m-%d_%H:%M:%S"))
    call('mkdir %s' % output_dir, shell=True)

    return output_dir


def main(args):
    train = pickle.load(open(args.train, "rb"))

    if args.model == "RF":
        output_dir = create_output_dir("RF")
        trials, best = hh.random_forest_experiment(itrs=args.hyperopt,
                                                   data=train,
                                                   output_dir=output_dir)
        pickle.dump(rf.best_rf, open("%s/model.pkl" % output_dir, "wb"))
        pickle.dump(trials, open("%s/trials.pkl" % output_dir, "wb"))
        
        with open("%s/best_config" % output_dir, "w") as fp:
            json.dump(best, fp)

    print('Done')


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("--train", type=str, required=True,
                        help="File containing train data (a pkl)")
    parser.add_argument("--test", type=str,
                        help="File containing test data (a pkl)")
    parser.add_argument("--bag_interval", type=str,
                        help="Number of minutes for each bag.")
    parser.add_argument("--model", type=str, required=True,
                        choices=["RF", "miSVM", "majority_class"],
                        help="Model type")
    parser.add_argument("--hyperopt", type=int,
                        help="Number of hyperparameter iterations.")

    main(parser.parse_args())
