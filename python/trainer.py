# -*- coding: utf-8 -*-
import argparse
import datetime as dt
import json
import os
import pickle
from subprocess import call
import numpy as np
import pandas as pd
import Models.hyperopt_pipeline.HyperoptHelper as hh
import Models.hyperopt_pipeline.RandomForest as rf
import Models.hyperopt_pipeline.MISVM_Classifier as MISVM
import Models.hyperopt_pipeline.miSVM_Classifier as miSVM
import Models.hyperopt_pipeline.LogisticRegression_Classifier as lrc
import Models.hyperopt_pipeline.GradientBoosted_Classifier as gbc
import Models.hyperopt_pipeline.SVM_Classifier as SVM
import Models.sklearn_pipeline.RandomForestExperiment as rfe
import Models.sklearn_pipeline.LogisticRegressionExperiment as lre
import Models.sklearn_pipeline.GradientBoostedExperiment as gbc
import Models.sklearn_pipeline.SvmExperiment as svm


def create_output_dir(args):
    model_type = args.model

    if not os.path.isdir("./saved_models"):
        call("mkdir saved_models", shell=True)
    
    if not os.path.isdir("./saved_models/%s" % model_type):
        call("mkdir saved_models/%s" % model_type, shell=True)

    if not os.path.isdir("./saved_models/%s/intv=%s" %
                         (model_type, args.bag_interval)):
        call("mkdir saved_models/%s/intv=%s" % (model_type, args.bag_interval),
             shell=True)

    # Create directory storing all files generated by the current run
    now = dt.datetime.now()
    output_dir = "saved_models/%s/intv=%s/%s" % \
                 (model_type, args.bag_interval,
                  now.strftime("%Y-%m-%d_%H:%M:%S"))
    call('mkdir %s' % output_dir, shell=True)

    with open("%s/exp_config" % output_dir, "w") as fp:
        fp.write(args.__str__())

    return output_dir


def run_hyperopt_experiment(train, args):
    if args.model == "RF":
        print("Starting hyperopt experiment for Random Forest model...")
        output_dir = create_output_dir(args)

        trials, best = hh.random_forest_experiment(itrs=args.hyperopt,
                                                   data=train,
                                                   output_dir=output_dir)
        pickle.dump(rf.best_rf, open("%s/model.pkl" % output_dir, "wb"))
        pickle.dump(trials, open("%s/trials.pkl" % output_dir, "wb"))

        with open("%s/feature_importances" % output_dir, "w") as fp:
            fp.write(rf.best_rf.feature_importances_.__str__())

        with open("%s/best_config.json" % output_dir, "w") as fp:
            json.dump(best, fp)

    elif args.model == "miSVM":
        print("Starting hyperopt experiment for mi-SVM model...")
        output_dir = create_output_dir(args)

        trials, best = hh.miSVM_experiment(itrs=args.hyperopt, data=train,
                                           output_dir=output_dir)
        pickle.dump(miSVM.best_svm, open("%s/model.pkl" % output_dir, "wb"))
        pickle.dump(trials, open("%s/trials.pkl" % output_dir, "wb"))

        with open("%s/best_config.json" % output_dir, "w") as fp:
            json.dump(best, fp)

    elif args.model == "MISVM":
        print("Starting hyperopt experiment for MI-SVM model...")
        output_dir = create_output_dir(args)

        trials, best = hh.MISVM_experiment(itrs=args.hyperopt, data=train,
                                           output_dir=output_dir)
        pickle.dump(MISVM.best_svm, open("%s/model.pkl" % output_dir, "wb"))
        pickle.dump(trials, open("%s/trials.pkl" % output_dir, "wb"))

        with open("%s/best_config.json" % output_dir, "w") as fp:
            json.dump(best, fp)
    
    elif args.model == "SVM":
        print("Starting hyperopt experiment for SVM model...")
        output_dir = create_output_dir(args)

        trials, best = hh.SVM_experiment(itrs=args.hyperopt, data=train,
                                         output_dir=output_dir)
        pickle.dump(SVM.best_svm, open("%s/model.pkl" % output_dir, "wb"))
        pickle.dump(trials, open("%s/trials.pkl" % output_dir, "wb"))

        with open("%s/best_config.json" % output_dir, "w") as fp:
            json.dump(best, fp)
    
    elif args.model == "LRC":
        print("Starting hyperopt experiment for Logistic Regression model...")
        output_dir = create_output_dir(args)
        trials, best = hh.logistic_regression_experiment(itrs=args.hyperopt,
                                                       data=train,
                                                       output_dir=output_dir)
        pickle.dump(lrc.best_model, open("%s/model.pkl" % output_dir, "wb"))
        pickle.dump(trials, open("%s/trials.pkl" % output_dir, "wb"))

        with open("%s/best_config.json" % output_dir, "w") as fp:
            json.dump(best, fp)

    elif args.model == "GBC":
        print("Starting hyperopt experiment for Gradient Boosted Decision Tree "
              "model...")
        output_dir = create_output_dir(args)
        trials, best = hh.gradient_boosted_experiment(itrs=args.hyperopt,
                                                      data=train,
                                                      output_dir=output_dir)
        pickle.dump(gbc.best_model, open("%s/model.pkl" % output_dir, "wb"))
        pickle.dump(trials, open("%s/trials.pkl" % output_dir, "wb"))

        with open("%s/best_config.json" % output_dir, "w") as fp:
            json.dump(best, fp)

    else:
        raise ValueError("Experiment class not found.")


def run_sklearn_experiment(train, args):
    if args.model == "RF":
        print("Starting sklearn experiment for Random Forest model...")
        output_dir = create_output_dir(args)

        exp = rfe.RandomForestExperiment(train, args.sklearn)
        exp.run()

        # Save results to experiment's output directory
        pickle.dump(exp.grid.best_estimator_, \
                            open("%s/model.pkl" % output_dir, "wb"))

        results_df = pd.DataFrame(exp.grid.cv_results_)

        print("Best Score (F1): %0.5f" % exp.grid.best_score_)
        results_df.to_csv('%s/cv_results.csv' % output_dir, sep=",")

    elif args.model == "LRC":
        print("Starting sklearn experiment for Logistic Regression model...")
        output_dir = create_output_dir(args)

        exp = lre.LogisticRegressionExperiment(train, args.sklearn)
        exp.run()

        # Save results to experiment's output directory
        pickle.dump(exp.grid.best_estimator_, \
                    open("%s/model.pkl" % output_dir, "wb"))

        results_df = pd.DataFrame(exp.grid.cv_results_)

        print("Best Score (F1): %0.5f" % exp.grid.best_score_)
        results_df.to_csv('%s/cv_results.csv' % output_dir, sep=",")

    elif args.model == "GBC":
        print("Starting sklearn experiment for Gradient Boosted Decision Tree "
              "model...")
        output_dir = create_output_dir(args)

        exp = gbc.GradientBoostedExperiment(train, args.sklearn)
        exp.run()

        # Save results to experiment's output directory
        pickle.dump(exp.grid.best_estimator_, \
                    open("%s/model.pkl" % output_dir, "wb"))

        results_df = pd.DataFrame(exp.grid.cv_results_)

        print("Best Score (F1): %0.5f" % exp.grid.best_score_)
        results_df.to_csv('%s/cv_results.csv' % output_dir, sep=",")

    elif args.model == "SVM":
        print("Starting sklearn experiment for Support Vector Machine model...")
        output_dir = create_output_dir(args)

        exp = svm.SvmExperiment(train, args.sklearn)
        exp.run()

        # Save results to experiment's output directory
        pickle.dump(exp.grid.best_estimator_, \
                    open("%s/model.pkl" % output_dir, "wb"))

        results_df = pd.DataFrame(exp.grid.cv_results_)

        print("Best Score (F1): %0.5f" % exp.grid.best_score_)
        results_df.to_csv('%s/cv_results.csv' % output_dir, sep=",")

    else:
        raise ValueError("Experiment class not found.")


def main(args):
    train = pickle.load(open(args.train, "rb"))

    if args.take_mean:
        print("Taking the feature mean of bag instances...")
        for bag in train:
            bag.instances = np.mean(bag.instances, axis=0)

    if args.hyperopt:
        run_hyperopt_experiment(train, args)
    elif args.sklearn:
        run_sklearn_experiment(train, args)

    print('Done')


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("--train", type=str, required=True,
                        help="File containing training data (a pkl)")
    parser.add_argument("--bag_interval", type=str,
                        help="Number of minutes for each bag.")
    parser.add_argument("--model", type=str, required=True,
                        choices=["RF", "miSVM", "MISVM", "LRC", "GBC", 
                        "SVM"],
                        help="Model type")
    parser.add_argument("--hyperopt", type=int,
                        help="Number of hyperparameter iterations for "
                             "hyperopt tuning.")
    parser.add_argument("--sklearn", type=int,
                        help="Number of hyperparameter iterations for sklearn "
                             "tuning.")
    parser.add_argument("--take_mean", action='store_true', default=False,
                        help="Use the feature mean for each bag as one "
                             "instance (as opposed to stacking multiple "
                             "instances as the input to the model).")

    main(parser.parse_args())
